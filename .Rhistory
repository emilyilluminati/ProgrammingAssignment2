help.start()
ls()
help(open)
?open
?file
q()
?mvtnorm
search()
library(mvtnorm)
?mvtnorm
search()
?mvnorm
?mvnorm()
??mvnorm
?mvtnorm
?mvtnorm()
?mvtnorm
search()
library(mvnorm)
library(mvtnorm)
?mvtnorm
?mvtnorm
??mvtnorm
args(mvtnorm)
?mvnorm
?rmvnorm
q()
?rep
sim.means = rep(0,45)
sim.means
sim.means = rep(0:45)
sim.means
rm(sim.means)
q()
count <- 0
while(count < 10)   {
print(count)
count <- count + 1
}
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j],i,j)
}
}
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(c(x[i,j],i,j))
}
}
For (letter in x) {
print(letter)
rm(x)
x <- c("a", "b", "c", "d")
class(x)
x
for (i in 1:4) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(letter)
}
for (i in 1:4) print(x[i])
for (letter in x)     print(letter)
if(x > 3) {
y <- 10
}   else   {
y <- 0
}
args(plot.default)
UseMethod("mean")
args(paste)
paste
args(cat)
search()
f <- function(x,y) {
x^2 + y / z
}
ls()
class(f)
environment(f)
parent.env(environment(f))
parent.env(parent.env(environment(f)))
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
ls()
cube <- make.power(3)
class(cube)
ls(environment(cube))
square <- make.power(2)
cube(3)
square(3)
ls(environment(cube))
ls(environment(f))
environment(f)
environment(cube)
get("n", environment(cube))
get("n")
get("f")
get(class("n"), environment(cube))
class(get("n", environment(cube)))
class(get("pow", environment(cube)))
class(ls(environment(cube)))
eapply(R_GlobalEnv, class)
eapply(GlobalEnv, class)
eapply(GlobalEnv, class())
lapply(ls,class)
eapply(.GlobalEnv, class())
eapply(.GlobalEnv, class
)
eapply(.GlobalEnv, class)
ls(environment(cube))
lapply(ls(environment(cube)), class)
eapply(environment(cube), class)
optimize
x <- 1:4
lapply(x,runif)
args(runif)
x <- list(a = matrix(1:4,2,2), b = matrix(1:6,3,2))
x
#returns the first column of each element of the list!!
lapply(x,function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10)), c = rnorm(20,1),d = rnorm(100,5))
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20,1),d = rnorm(100,5))
lapply(x,mean)
sapply(x,mean)
class(sapply(x,mean))
str(sapply(x,mean))
mesn(x)
mean(x)
str(apply)
x <- matrix(rnorm(200),20,10)
x
apply(x,1,quantile,probs=c(0.25,0.75))
str(tapply)
x <- c(rnorm(10), runif(10),rnorm(10,1))
f <- gl(3,10)
f
str(gl)
gl
tapply(x,f,mean)
tapply(x,f,mean,simplify=F)
tapply(x,f,range)
str(split)
split(x,f)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop=TRUE))
str(mapply)
library(datasets)
data(iris)
ls()
iris[iris$Species=='virginica']
iris[,iris$Species=='virginica']
iris[iris$Species=='virginica',]
iris[iris$Species=='virginica',]$Sepal.Length
length(iris[iris$Species=='virginica',]$Sepal.Length)
mean(iris[iris$Species=='virginica',]$Sepal.Length)
apply(iris[, 1:4], 2, mean)
head(iris)
?cor
x <- 1
sprintf("%03d",as.numeric(x))
sprintf("%03d",as.integer(x))
filename <- paste(sprintf("%03d",as.numeric(x)),".csv",sep="")
filename
x <- rnorm(100)
y <- x + rnorm(100, sd = 0.5)
f <- gl(2, 50, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f)
search()
library("lattice")
search()
x <- rnorm(100)
y <- x + rnorm(100, sd = 0.5)
f <- gl(2, 50, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f)
?plotmath
plot(1:10, 1:10, type = "n")
text(4, 8.4, "expression(hat(beta) == (X^t * X)^{-1} * X^t * y)",
cex = .8)
plot(1:10, 1:10)
text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
text(4, 8.4, "expression(hat(beta) == (X^t * X)^{-1} * X^t * y)",
cex = .8)
text(4, 7, expression(bar(x) == sum(frac(x[i], n), i==1, n)))
text(4, 6.4, "expression(bar(x) == sum(frac(x[i], n), i==1, n))",
cex = .8)
text(8, 5, expression(paste(frac(1, sigma*sqrt(2*pi)), " ",
plain(e)^{frac(-(x-mu)^2, 2*sigma^2)})),
cex = 1.2)
plot(1:10, 1:10)
text(4, 9, expression(hat(beta) == (X^t * X)^{-1} * X^t * y))
plot(1:10, 1:10, type = "n")
text(4, 9, expression((E * R)^{2}) == FUN))
plot(1:10, 1:10, type = "n")
text(4,9, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")))
plot(1:10, 1:10, type = "n")
text(4,9, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=9)
plot(1:10, 1:10, type = "n")
text(4,9, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
plot(1:10, 1:10, type = "n")
text(4,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
plot(1:10, 1:10, type = "n")
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
plot(0,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
text(substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
plot.new()
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
plot(1:10, 1:10,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
getwd()
png("myplot.png", width=4, height=4, units="in", res=300)
plot(1:10, 1:10,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
dev.off() #only 129kb in size
png("myplot.png")#, width=4, height=4, units="in", res=300)
plot(1:10, 1:10,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=5)
dev.off() #only 129kb in size
png("myplot.png")#, width=4, height=4, units="in", res=300)
plot(1:10, 1:10,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=3)
dev.off() #only 129kb in size
png("myplot.png")#, width=4, height=4, units="in", res=300)
plot(1:10, 1:10,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=4)
dev.off() #only 129kb in size
png("myplot.png")#, width=4, height=4, units="in", res=300)
plot(1:10, 1:10,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=4.5)
dev.off() #only 129kb in size
png("myplot.png", bg = "transparent")#, width=4, height=4, units="in", res=300)
plot(1:10, 1:10,xaxt='n',yaxt='n',bty='n',pch='',ylab='',xlab='')
text(6,4, substitute((a*b)^{2} == c,list(a="E",b="R",c="FUN")),cex=4.5)
dev.off() #only 129kb in size
library(swirl)
swirl()
5 + 7
x <- 5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0, 1, 2), each = 10)
num_vect<-c(0.5, 55, -10,6)
tf<-num_vect<1
tf
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char, "Peabody Law")
my_name
paste(my_name_,collapse = " ")
paste(my_name,collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y", "Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44, NA, 5, NA)
x*3
y<-rnorm(1000
)
z<-rep(NA,1000)
my_data <- sample(c(y, z), 100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[c(-2, -10)]
x[-c(2, 10)]
ect <- c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)<- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
quit()
library(swirl)
swirl()
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
ls()
args(makevector)
args(makeVector)
x<-1:100
makeVector(x)
output<-makeVector(x)
class(output)
names(output)
output$se*
t
output$se
output$set
class(output$set)
class(output$get)
output$get
names(output)
output$setmean
class(output$setmean)
output$getmean
class(output$getmean)
output
get()
output[[get]]
output[[get]]()
output[get]()
output
output['get']()
output['get']
class(output['get'])
output[['get']]
class(output[['get']])
output[['get']]()
output[['getmean']]()
output[['getmean']]
output[['setmean']]
output[['setmean']]()
output[['set']]()
output[['set']]
output
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
x
makeVector(x)
cachemean(x)
cachemean()
cachemean(output)
ls()
output
output$getmean
output[['getmean']]
output[['getmean']]()
ls()
a<-c(0, 2, 2, 0 )
a
as.matrix(a)
dim(as.matrix(a))
rm(a)
a<-c(0, 2, 2, 0 )
dim(as.matrix(a))
class(dim(as.matrix(a)))
length(dim(as.matrix(a)))
dim(as.matrix(a))[[1]]
dim(as.matrix(a))[[2]]
setwd("C:\\Users\\EmilyPC2\\Documents\\University\\Open Courses\\Data Science Specialization\\R Programming\\Week 3\\Programming Assignment - Peer Evaluation")
dir()
setwd(dir(pattern="Prog"))
dir()
setwd(dir(pattern="Prog"))
dir()
librar(knitr)
library(knitr)
search()
ls
ls()
dir()
source(dir(pattern="cache")
)
ls()
a<-matrix(c(-1, 3, -3, 0, -6, 5, -5, -3,  1),3,3)
a
?matrix
a<-matrix(c(-1, 3, -3, 0, -6, 5, -5, -3,  1),3,3,T)
a
solve(a)
ls()
m(a)
makeCa(a)
makeCa*(a)
makeCacheMatrix(a)
ls()
eee<-makeCacheMatrix(a)
cacheSolve(eee)
cacheSolve(eee)
cacheSolve(eee)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v<-makeVector(c(15,0,10,5,15,25,6,4))
mean(c(15,0,10,5,15,25,6,4))
v$setmean(15)
cachemean(v)
